{"version":3,"sources":["../src/constants/abi.ts","../src/index.ts","../src/utils/crossChainHelper.ts","../src/constants/endpoints.ts","../src/utils/gnosis.ts","../src/utils/helpers.ts","../src/utils/wireAllHelpers.ts","../src/wireAll.ts","../src/setConfig.ts","../src/getDefaultConfig.ts","../src/generateAppConfig.ts","../src/getConfig.ts","../src/checkWireAllConfig.ts"],"names":["fs","deploymentAddresses","ethers","ENDPOINT_ABI","MESSAGING_LIBRARY_ABI","writeFile"],"mappings":"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","sourcesContent":["export const ENDPOINT_ABI = [\n\t\"function defaultSendVersion() view returns (uint16)\",\n\t\"function defaultReceiveVersion() view returns (uint16)\",\n\t\"function defaultSendLibrary() view returns (address)\",\n\t\"function defaultReceiveLibraryAddress() view returns (address)\",\n\t\"function uaConfigLookup(address) view returns (tuple(uint16 sendVersion, uint16 receiveVersion, address receiveLibraryAddress, address sendLibrary))\"\n];\n\nexport const MESSAGING_LIBRARY_ABI = [\n\t\"function appConfig(address, uint16) view returns (tuple(uint16 inboundProofLibraryVersion, uint64 inboundBlockConfirmations, address relayer, uint16 outboundProofType, uint64 outboundBlockConfirmations, address oracle))\",\n\t\"function defaultAppConfig(uint16) view returns (tuple(uint16 inboundProofLibraryVersion, uint64 inboundBlockConfirmations, address relayer, uint16 outboundProofType, uint64 outboundBlockConfirmations, address oracle))\"\n];\n\n\nexport const USER_APPLICATION_ABI = [\n\t\"function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config)\", \n\t\"function setSendVersion(uint16 _version)\", \"function setReceiveVersion(uint16 _version)\"\n];\n\nexport const LZ_APP_TRUSTED_REMOTE_LOOKUP_FUNCTION_FRAGMENT = \"function trustedRemoteLookup(uint16) public view returns (bytes)\"\n\nexport const LZ_APP_ABI = [\n\t\"function setTrustedRemote(uint16 _srcChainId, bytes calldata _path)\",\n\t\"function setUseCustomAdapterParams(bool _useCustomAdapterParams)\",\n\t\"function setDefaultFeeBp(uint16 _feeBp)\",\n\t\"function setFeeBp(uint16 _dstChainId, bool _enabled, uint16 _feeBp)\",\n\t\"function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas)\",\n\t\"function useCustomAdapterParams() public view returns (bool) \",\n\tLZ_APP_TRUSTED_REMOTE_LOOKUP_FUNCTION_FRAGMENT,\n\t\"function minDstGasLookup(uint16, uint16) public view returns (uint)\",\n\t\"function defaultFeeBp() public view returns (uint16)\",\n\t\"function chainIdToFeeBps(uint16) public view returns (uint16, bool)\",\n];","import { task, types } from \"hardhat/config\";\nimport { LZ_APP_TRUSTED_REMOTE_LOOKUP_FUNCTION_FRAGMENT } from './constants/abi'\nimport wireAll from './wireAll';\nimport setConfig from './setConfig';\nimport getDefaultConfig from './getDefaultConfig'\nimport { generateAppConfigAction } from './generateAppConfig';\nimport getConfig from './getConfig';\nimport checkWireAllConfig from './checkWireAllConfig';\n\ntask(\"setConfig\", \"sets Send and Receive Messaging Library versions and a custom application config for contracts implementing ILayerZeroUserApplicationConfig interface\", setConfig)\n\t.addParam(\"configPath\", \"the application config file path\")\n\t.addOptionalParam(\"name\", \"name of the deployed contracts. Should be specified if the same contract deployed on different chains and the deployment information is located in the deployments folder\")\n\t.addOptionalParam(\"address\", \"address of the deployed contracts. Should be specified if the contract address is the same on all chains\")\n\t.addOptionalParam(\"gnosisConfigPath\", \"the path to a file with Gnosis config. If specified, the transactions will be sent to Gnosis\")\n    .addOptionalParam(\"gasLimit\", \"override execution gasLimit\")\n\ntask(\"getDefaultConfig\", \"outputs the default Send and Receive Messaging Library versions and the default application config\", getDefaultConfig)\n\t.addParam(\"networks\", \"comma separated list of networks\")\n\ntask(\"generateAppConfig\", \"generates the config mesh for a User Application\", generateAppConfigAction)\n\t.addParam(\"networks\", \"comma separated list of networks\")\n\t.addOptionalParam(\"name\", \"name of the deployed contract. Should be specified only if the deployment information is located in the deployments folder\")\n\t.addOptionalParam(\"outputFileName\", \"the path to the output file\", \"./constants/defaultConfig.json\", types.string)\n\t.addOptionalParam(\"checkConnectionFunctionFragment\", \"the checkConnection function fragment\", LZ_APP_TRUSTED_REMOTE_LOOKUP_FUNCTION_FRAGMENT, types.string)\n\ntask(\"getConfig\", \"outputs the application's Send and Receive Messaging Library versions and the config for remote networks\", getConfig)\n\t.addParam(\"remoteNetworks\", \"comma separated list of remote networks\")\n\t.addOptionalParam(\"name\", \"name of the deployed contract. Should be specified only if the deployment information is located in the deployments folder\")\n\t.addOptionalParam(\"address\", \"the contract address\");\n\ntask(\"checkWireAllConfig\", \"\", checkWireAllConfig)\n\t.addParam(\"e\", \"the environment ie: mainnet, testnet or sandbox\")\n\t.addFlag(\"u\", \"show use custom adapter params\")\n\t.addFlag(\"t\", \"show trusted remote lookup\")\n\t.addFlag(\"m\", \"show min destination gas lookup\")\n\t.addParam(\"chains\", \"comma separated list of networks\")\n    .addOptionalParam(\"contract\", \"name of contract\")\n    .addOptionalParam(\"addresses\", \"addresses of contracts in same order as chains\")\n    .addOptionalParam(\"proxyContract\", \"name of proxy contract\")\n    .addOptionalParam(\"proxyChain\", \"name of proxy chain\")\n\ntask(\"wireAll\", \"\", wireAll)\n\t.addParam(\"e\", \"the environment ie: mainnet, testnet or sandbox\")\n    .addOptionalParam(\"noPrompt\", \"no prompt\", false, types.boolean)\n\t.addOptionalParam(\"configPath\", \"Optional config path. Default: ./constants/wireUpConfig.json\", \"./constants/wireUpConfig.json\", types.string)\n\t.addOptionalParam(\"n\", \"send to gnosis\", false, types.boolean)\n\t.addOptionalParam(\"gasLimit\", \"override execution gasLimit\")\n    .addOptionalParam(\"gnosisConfigPath\", \"Optional config path. Default: ./constants/gnosisConfig.json\", \"./constants/gnosisConfig.json\", types.string)\n","import * as ethers from \"ethers\";\nimport { Contract, ContractReceipt } from \"ethers\";\nimport EthersAdapter from \"@gnosis.pm/safe-ethers-lib\";\nimport SafeServiceClient from \"@gnosis.pm/safe-service-client\";\nimport Safe from \"@gnosis.pm/safe-core-sdk\";\nimport { LZ_APP_ABI } from \"../constants/abi\";\nimport { LZ_ENDPOINTS } from \"../constants/endpoints\";\nimport { MainnetEndpointId, TestnetEndpointId, SandboxEndpointId } from \"@layerzerolabs/lz-definitions\";\nimport { toContractNetworksString, getSafeConfigs, SafeConfigs } from './gnosis'\nimport { promptToProceed, arrayToCsv } from \"./helpers\";\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nimport { writeFile } from \"fs/promises\";\n\n\nexport interface ExecutableTransaction {\n\tcontractName: string;\n\tfunctionName: string;\n\targs: any[];\n\ttxArgs?: any;\n}\n\nexport interface Transaction {\n\tneedChange: boolean;\n\tchainId: string;\n\tremoteChainId?: string;\n\tcontractAddress: string;\n\tfunctionName: string;\n\targs: any[];\n\tcalldata?: string;\n\tdiff?: { [key: string]: { newValue: any; oldValue: any } };\n}\n\nexport interface NetworkTransactions {\n\tnetwork: string;\n\ttransactions: Transaction[];\n}\n\nconst providerByNetwork: { [name: string]: ethers.providers.JsonRpcProvider } = {};\nexport const getProvider = (hre: any, network: string) => {\n\tif (!providerByNetwork[network]) {\n\t\tconst networkUrl = hre.config.networks[network].url;\n\t\tproviderByNetwork[network] = new ethers.providers.JsonRpcProvider(networkUrl);\n\t}\n\treturn providerByNetwork[network];\n}\n\nexport const getWallet = (index: number) => ethers.Wallet.fromMnemonic(process.env.MNEMONIC || \"\", `m/44'/60'/0'/0/${index}`)\n\nconst connectedWallets: { [key: string]: any } = {};\nexport const getConnectedWallet = (hre: any, network: string, walletIndex: number) => {\n\tconst key = `${network}-${walletIndex}`;\n\tif (!connectedWallets[key]) {\n\t\tconst provider = getProvider(hre, network);\n\t\tconst wallet = getWallet(walletIndex);\n\t\tconnectedWallets[key] = wallet.connect(provider);\n\t}\n\treturn connectedWallets[key];\n};\n\nconst deploymentAddresses: { [key: string]: string } = {};\nexport const getDeploymentAddress = (network: string, contractName: string) => {\n\tconst key = `${network}-${contractName}`;\n\tif (!deploymentAddresses[key]) {\n\t\tdeploymentAddresses[key] =  getDeploymentAddresses(network)[contractName];\n\t}\n\tif (!deploymentAddresses[key]) {\n\t\tthrow Error(`contract ${key} not found for network: ${network}`);\n\t}\n\treturn deploymentAddresses[key];\n}\n\nconst contracts: { [key: string]: any } = {};\nexport const getContract = async (hre: any, network: string, contractName: string) => {\n\tif (network == \"hardhat\") {\n\t\treturn await hre.ethers.getContract(contractName);\n\t}\n\n\tconst key = `${network}-${contractName}`;\n\tif (!contracts[key]) {\n\t\tconst contractAddress = getDeploymentAddress(network, contractName);\n\t\tconst provider = getProvider(hre, network);\n\t\tconst contractFactory = await getContractFactory(hre, contractName);\n\t\tconst contract = contractFactory.attach(contractAddress);\n\t\tcontracts[key] = contract.connect(provider);\n\t}\n\treturn contracts[key];\n}\n\nexport const getContractAt = async (hre: any, network: string, abi: any, contractAddress: string) => {\n\tconst key = `${network}-${contractAddress}`;\n\tif (!contracts[key]) {\n\t\tconst provider = getProvider(hre, network);\n\t\tconst contract = new Contract(contractAddress, abi, provider);\n\t\tcontracts[key] = contract.connect(provider);\n\t}\n\treturn contracts[key];\n}\n\nexport const getWalletContract = async (hre: any, network: string, contractName: string, walletIndex: number = 0) => {\n\tconst contract = await getContract(hre, network, contractName);\n\tconst wallet = getConnectedWallet(hre, network, walletIndex);\n\treturn contract.connect(wallet);\n}\n\nexport const getWalletContractAt = async (hre: any, network: string, abi: any, contractAddress: string, walletIndex = 0) => {\n\tconst contract = await getContractAt(hre, network, abi, contractAddress);\n\tconst wallet = getConnectedWallet(hre, network, walletIndex);\n\treturn contract.connect(wallet);\n};\n\nconst contractFactories: { [name: string]: ethers.ContractFactory } = {};\nconst getContractFactory = async (hre: any, contractName: string) => {\n\tif (!contractFactories[contractName]) {\n\t\tcontractFactories[contractName] = await hre.ethers.getContractFactory(contractName);\n\t}\n\treturn contractFactories[contractName];\n}\n\nexport const executeTransaction = async (hre: any, network: string, transaction: any, gasLimit?: any, contract?: any, abi?: any): Promise<ContractReceipt> => {\n    let walletContract;\n    if (contract) {\n        walletContract = contract;\n    } else if(hre.ethers.utils.isAddress(transaction.contractName)) {\n        walletContract = await getWalletContractAt(hre, network, abi, transaction.contractName, 0);\n    } else {\n        walletContract = await getWalletContract(hre, network, transaction.contractName, 0);\n    }\n\tconst gasPrice = await getProvider(hre, network).getGasPrice();\n\tconst finalGasPrice = gasPrice.mul(10).div(8);\n\treturn await (\n\t\tawait walletContract[transaction.functionName](...transaction.args, {\n\t\t\tgasPrice: finalGasPrice,\n\t\t\tgasLimit: gasLimit !== undefined ? gasLimit : 200000,\n\t\t\t...transaction.txArgs,\n\t\t})\n\t).wait()\n}\n\nexport async function executeTransactions(hre: any, taskArgs: any, transactionBynetwork: any[]) {\n\tconst columns = [\"needChange\", \"chainId\", \"remoteChainId\", \"contractName\", \"functionName\", \"args\", \"diff\", \"calldata\"];\n\n\tconst data = transactionBynetwork.reduce((acc, { network, transactions }) => {\n\t\ttransactions.forEach((transaction: any) => {\n\t\t\tacc.push([\n\t\t\t\tnetwork,\n\t\t\t\t...columns.map((key) => {\n\t\t\t\t\tif (typeof transaction[key] === \"object\") {\n\t\t\t\t\t\treturn JSON.stringify(transaction[key]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn transaction[key];\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t]);\n\t\t});\n\t\treturn acc;\n\t}, [] as any);\n\tawait writeFile(\"./transactions.csv\", arrayToCsv([\"network\"].concat(columns), data));\n\n\tconsole.log(\"Full configuration is written at:\");\n\tconsole.log(`file:/${process.cwd()}/transactions.csv`);\n\n\tconst errs: any[] = [];\n\tconst print: any = {};\n\tlet previousPrintLine = 0;\n\tconst printResult = () => {\n\t\tif (previousPrintLine) {\n\t\t\tprocess.stdout.moveCursor(0, -previousPrintLine);\n\t\t}\n\t\tif (Object.keys(print)) {\n\t\t\tpreviousPrintLine = Object.keys(print).length + 4;\n\t\t\tconsole.table(Object.keys(print).map((network) => ({ network, ...print[network] })));\n\t\t}\n\t};\n\n\tif (taskArgs.n) {\n\t\tawait promptToProceed(\"Would you like to Submit to gnosis?\", taskArgs.noPrompt);\n        const gnosisConfig = getSafeConfigs(taskArgs.gnosisConfigPath);\n\t\tawait Promise.all(\n\t\t\ttransactionBynetwork.map(async ({ network, transactions }) => {\n\t\t\t\tconst transactionToCommit = transactions.filter((transaction: any) => transaction.needChange);\n\t\t\t\tprint[network] = print[network] || { requests: `1/1` };\n\t\t\t\tprint[network].current = `executeGnosisTransactions: ${transactionToCommit}`;\n\t\t\t\ttry {\n\t\t\t\t\tawait executeGnosisTransactions(hre, network, gnosisConfig, transactionToCommit);\n\t\t\t\t\tprint[network].requests = `1/1`;\n\t\t\t\t\tprintResult();\n\t\t\t\t} catch (err: any) {\n\t\t\t\t\tconsole.log(`Failing calling executeGnosisTransactions for network ${network} with err ${err}`);\n\t\t\t\t\terrs.push({\n\t\t\t\t\t\tnetwork,\n\t\t\t\t\t\terr,\n\t\t\t\t\t});\n\t\t\t\t\tprint[network].current = err.message;\n\t\t\t\t\tprint[network].err = true;\n\t\t\t\t\tprintResult();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t} else {\n\t\tawait promptToProceed(\"Would you like to run these transactions?\", taskArgs.noPrompt);\n\t\tawait Promise.all(\n\t\t\ttransactionBynetwork.map(async ({ network, transactions }) => {\n\t\t\t\tconst transactionToCommit = transactions.filter((transaction: any) => transaction.needChange);\n\n\t\t\t\tlet successTx = 0;\n\t\t\t\tprint[network] = print[network] || { requests: `${successTx}/${transactionToCommit.length}` };\n\t\t\t\tfor (let transaction of transactionToCommit) {\n\t\t\t\t\tprint[network].current = `${transaction.contractName}.${transaction.functionName}`;\n\t\t\t\t\tprintResult();\n\t\t\t\t\ttry {\n\t\t\t\t\t    const gasLimit = taskArgs.gasLimit;\n\t\t\t\t\t\tconst tx = await executeTransaction(hre, network, transaction, gasLimit);\n\t\t\t\t\t\tprint[network].past = `${transaction.contractName}.${transaction.functionName} (${tx.transactionHash})`;\n\t\t\t\t\t\tsuccessTx++;\n\t\t\t\t\t\tprint[network].requests = `${successTx}/${transactionToCommit.length}`;\n\t\t\t\t\t\tprintResult();\n\t\t\t\t\t} catch (err: any) {\n\t\t\t\t\t\tconsole.log(`Failing calling ${transaction.contractName}.${transaction.functionName} for network ${network} with err ${err}`);\n\t\t\t\t\t\tconsole.log(err);\n\t\t\t\t\t\terrs.push({\n\t\t\t\t\t\t\tnetwork,\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tprint[network].current = err;\n\t\t\t\t\t\tprint[network].err = true;\n\t\t\t\t\t\tprintResult();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tif (!errs.length) {\n\t\tconsole.log(\"Wired all networks successfully\");\n\t} else {\n\t\tconsole.log(errs);\n\t}\n}\n\n\nexport const executeGnosisTransactions = async (hre: any, network: string, gnosisConfig: SafeConfigs, transactions: Transaction[]) => {\n\tconst signer = await getConnectedWallet(hre, network, 0);\n\tif (!gnosisConfig[network]) {\n\t\tthrow Error(`Gnosis for ${network} not found or not supported`);\n\t}\n\n\tconst { safeAddress, url, contractNetworks } = gnosisConfig[network];\n\tconsole.log(`safeAddress[${safeAddress}] url[${url}] ${toContractNetworksString(contractNetworks)}`);\n\n\tconst safeService = new SafeServiceClient(url);\n\tconst ethAdapter = new EthersAdapter({\n\t\tethers: hre.ethers,\n\t\tsignerOrProvider: signer,\n\t});\n\n\tconst safeSdk: Safe = await Safe.create({ ethAdapter, safeAddress, ...(!!contractNetworks && { contractNetworks })});\n\tconst gnosisTransactions = transactions.map((tx) => ({ to: tx.contractAddress, data: tx.calldata!, value: \"0\" }));\n\tif (gnosisTransactions.length > 0) {\n\t\tconst nonce = await safeService.getNextNonce(safeAddress);\n\t\tconst safeTransaction = await safeSdk.createTransaction(gnosisTransactions, { nonce });\n\n\t\tawait safeSdk.signTransaction(safeTransaction);\n\t\tconst safeTxHash = await safeSdk.getTransactionHash(safeTransaction);\n\t\tawait safeService.proposeTransaction({\n\t\t\tsafeAddress,\n\t\t\tsafeTransaction,\n\t\t\tsafeTxHash,\n\t\t\tsenderAddress: signer.address,\n\t\t});\n\t} else {\n\t\tconsole.log(`No transactions to submit for ${network}`);\n\t}\n}\n\nexport const getDeploymentAddresses = (network: string, throwIfMissing: boolean = true): any => {\n\tconst deploymentAddresses: { [key: string]: any } = {};\n\tconst DEPLOYMENT_PATH = path.resolve(\"deployments\");\n\n\tif (!fs.existsSync(DEPLOYMENT_PATH)) {\n\t\treturn deploymentAddresses;\n\t}\n\n\tlet folderName = network;\n\tif (network === \"hardhat\") {\n\t\tfolderName = \"localhost\";\n\t}\n\tconst networkFolderName = fs.readdirSync(DEPLOYMENT_PATH).filter((f:string) => f === folderName)[0];\n\tif (networkFolderName === undefined) {\n\t\tif(throwIfMissing) {\n\t\t\tthrow new Error(\"missing deployment files for endpoint \" + folderName);\n\t\t}\n\t\treturn deploymentAddresses;\t\t\n\t}\n\n\tconst networkFolderPath = path.resolve(DEPLOYMENT_PATH, folderName);\n\tconst files = fs.readdirSync(networkFolderPath).filter((f: string) => f.includes(\".json\"));\n\tfiles.forEach((file: string) => {\n\t\tconst filepath = path.resolve(networkFolderPath, file);\n\t\tconst data = JSON.parse(fs.readFileSync(filepath));\n\t\tconst contractName = file.split(\".\")[0];\n\t\tdeploymentAddresses[contractName] = data.address;\n\t});\n\n\treturn deploymentAddresses;\n}\n\nexport const getApplicationConfig = async (remoteNetwork: string, sendLibrary: any, receiveLibrary: any, applicationAddress: string) => {\n\tconst remoteChainId = getLayerZeroChainId(remoteNetwork);\n\tconst sendConfig = await sendLibrary.appConfig(applicationAddress, remoteChainId);\n\tlet inboundProofLibraryVersion = sendConfig.inboundProofLibraryVersion;\n\tlet inboundBlockConfirmations = sendConfig.inboundBlockConfirmations.toNumber();\n\n\tif (receiveLibrary) {\n\t\tconst receiveConfig = await receiveLibrary.appConfig(applicationAddress, remoteChainId);\n\t\tinboundProofLibraryVersion = receiveConfig.inboundProofLibraryVersion;\n\t\tinboundBlockConfirmations = receiveConfig.inboundBlockConfirmations.toNumber();\n\t}\n\treturn {\n\t\tremoteNetwork,\n\t\tinboundProofLibraryVersion,\n\t\tinboundBlockConfirmations,\n\t\trelayer: sendConfig.relayer,\n\t\toutboundProofType: sendConfig.outboundProofType,\n\t\toutboundBlockConfirmations: sendConfig.outboundBlockConfirmations.toNumber(),\n\t\toracle: sendConfig.oracle,\n\t};\n};\n\nexport const getEndpointAddress = (network: string): string => { return LZ_ENDPOINTS[network] }\n\n// expecting \"chain-environment\" eg. \"ethereum-mainnet\", \"ethereum-testnet\", \"ethereum-sandbox\"\nexport const getLayerZeroChainId = (network: string): string => {\n    const [chainName, environment] = network.split(\"-\");\n    const chainIdEnum = getChainIdEnum(chainName, environment)\n    if(environment == \"mainnet\") {\n        return MainnetEndpointId[chainIdEnum as any]\n    } else if(environment == \"testnet\") {\n        return TestnetEndpointId[chainIdEnum as any]\n    }  else if(environment == \"sandbox\") {\n        return SandboxEndpointId[chainIdEnum as any]\n    } else {\n        throw new Error(\"cannot find chainId\");\n    }\n}\n\nconst getChainIdEnum = (chainName: string, environment: string,): string => {\n    return `${chainName.split(\"-\")[0].toUpperCase()}_${environment.toUpperCase()}`\n}\n\nexport const getContractInstance = async (hre: any, network: string, contractNameOrAddress: string) => {\n    let contract;\n    if (hre.ethers.utils.isAddress(contractNameOrAddress)) {\n        contract = await getContractAt(hre, network, LZ_APP_ABI, contractNameOrAddress);\n    } else {\n        contract = await getContract(hre, network, contractNameOrAddress);\n    }\n    return contract;\n}","export const LZ_ENDPOINTS: {[key: string]: string} = {\n    \"aavegotchi-testnet\": \"0xfeBE4c839EFA9f506C092a32fD0BB546B76A1d38\",\n    \"arbitrum-mainnet\": \"0x3c2269811836af69497E5F486A85D7316753cf62\",\n    \"arbitrum-testnet\": \"0x6aB5Ae6822647046626e83ee6dB8187151E1d5ab\",\n    \"astar-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"aurora-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"aurora-testnet\": \"0x83c73Da98cf733B03315aFa8758834b36a195b87\",\n    \"avalanche-mainnet\": \"0x3c2269811836af69497E5F486A85D7316753cf62\",\n    \"avalanche-testnet\": \"0x93f54D755A063cE7bB9e6Ac47Eccc8e33411d706\",\n    \"base-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"base-testnet\": \"0x6aB5Ae6822647046626e83ee6dB8187151E1d5ab\",\n    \"blockgen-testnet\": \"0x55370E0fBB5f5b8dAeD978BA1c075a499eB107B8\",\n    \"bsc-mainnet\": \"0x3c2269811836af69497E5F486A85D7316753cf62\",\n    \"bsc-testnet\": \"0x6Fcb97553D41516Cb228ac03FdC8B9a0a9df04A1\",\n    \"canto-mainnet\": \"0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4\",\n    \"canto-testnet\": \"0xae92d5aD7583AD66E49A0c67BAd18F6ba52dDDc1\",\n    \"celo-mainnet\": \"0x3A73033C0b1407574C76BdBAc67f126f6b4a9AA9\",\n    \"celo-testnet\": \"0xae92d5aD7583AD66E49A0c67BAd18F6ba52dDDc1\",\n    \"conflux-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"conflux-testnet\": \"0x83c73Da98cf733B03315aFa8758834b36a195b87\",\n    \"coredao-mainnet\": \"0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4\",\n    \"coredao-testnet\": \"0xae92d5aD7583AD66E49A0c67BAd18F6ba52dDDc1\",\n    \"dexalot-mainnet\": \"0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4\",\n    \"dexalot-testnet\": \"0x6C7Ab2202C98C4227C5c46f1417D81144DA716Ff\",\n    \"dfk-mainnet\": \"0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4\",\n    \"dos-testnet\": \"0x45841dd1ca50265Da7614fC43A361e526c0e6160\",\n    \"eon-testnet\": \"0x83c73Da98cf733B03315aFa8758834b36a195b87\",\n    \"ethereum-mainnet\": \"0x66A71Dcef29A0fFBDBE3c6a460a3B5BC225Cd675\",\n    \"ethereum-testnet\": \"0xbfD2135BFfbb0B5378b56643c2Df8a87552Bfa23\",\n    \"fantom-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"fantom-testnet\": \"0x7dcAD72640F835B0FA36EFD3D6d3ec902C7E5acf\",\n    \"fuse-mainnet\": \"0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4\",\n    \"gnosis-mainnet\": \"0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4\",\n    \"gnosis-testnet\": \"0xae92d5aD7583AD66E49A0c67BAd18F6ba52dDDc1\",\n    \"harmony-mainnet\": \"0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4\",\n    \"harmony-testnet\": \"0xae92d5aD7583AD66E49A0c67BAd18F6ba52dDDc1\",\n    \"hubble-testnet\": \"0x8b14D287B4150Ff22Ac73DF8BE720e933f659abc\",\n    \"idex-testnet\": \"0x55370E0fBB5f5b8dAeD978BA1c075a499eB107B8\",\n    \"kava-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"kava-testnet\": \"0x8b14D287B4150Ff22Ac73DF8BE720e933f659abc\",\n    \"klaytn-mainnet\": \"0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4\",\n    \"klaytn-testnet\": \"0x6aB5Ae6822647046626e83ee6dB8187151E1d5ab\",\n    \"lif3-testnet\": \"0x55370E0fBB5f5b8dAeD978BA1c075a499eB107B8\",\n    \"loot-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"loot-testnet\": \"0x83c73Da98cf733B03315aFa8758834b36a195b87\",\n    \"mantle-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"mantle-testnet\": \"0x2cA20802fd1Fd9649bA8Aa7E50F0C82b479f35fe\",\n    \"meritcircle-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"meritcircle-testnet\": \"0xae92d5aD7583AD66E49A0c67BAd18F6ba52dDDc1\",\n    \"meter-mainnet\": \"0xa3a8e19253Ab400acDac1cB0eA36B88664D8DedF\",\n    \"meter-testnet\": \"0x3De2f3D1Ac59F18159ebCB422322Cb209BA96aAD\",\n    \"metis-mainnet\": \"0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4\",\n    \"metis-testnet\": \"0xae92d5aD7583AD66E49A0c67BAd18F6ba52dDDc1\",\n    \"moonbeam-mainnet\": \"0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4\",\n    \"moonbeam-testnet\": \"0xb23b28012ee92E8dE39DEb57Af31722223034747\",\n    \"moonriver-mainnet\": \"0x7004396C99D5690da76A7C59057C5f3A53e01704\",\n    \"nova-mainnet\": \"0x4EE2F9B7cf3A68966c370F3eb2C16613d3235245\",\n    \"okx-mainnet\": \"0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4\",\n    \"okx-testnet\": \"0xae92d5aD7583AD66E49A0c67BAd18F6ba52dDDc1\",\n    \"opbnb-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"opbnb-testnet\": \"0x83c73Da98cf733B03315aFa8758834b36a195b87\",\n    \"optimism-mainnet\": \"0x3c2269811836af69497E5F486A85D7316753cf62\",\n    \"optimism-testnet\": \"0xae92d5aD7583AD66E49A0c67BAd18F6ba52dDDc1\",\n    \"orderly-testnet\": \"0x83c73Da98cf733B03315aFa8758834b36a195b87\",\n    \"polygon-mainnet\": \"0x3c2269811836af69497E5F486A85D7316753cf62\",\n    \"polygon-testnet\": \"0xf69186dfBa60DdB133E91E9A4B5673624293d8F8\",\n    \"portal-testnet\": \"0xd682ECF100f6F4284138AA925348633B0611Ae21\",\n    \"scroll-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"scroll-testnet\": \"0x6098e96a28E02f27B1e6BD381f870F1C8Bd169d3\",\n    \"sepolia-mainnet\": \"0x7cacBe439EaD55fa1c22790330b12835c6884a91\",\n    \"sepolia-testnet\": \"0xae92d5aD7583AD66E49A0c67BAd18F6ba52dDDc1\",\n    \"shimmer-testnet\": \"0x83c73Da98cf733B03315aFa8758834b36a195b87\",\n    \"telos-mainnet\": \"0x66A71Dcef29A0fFBDBE3c6a460a3B5BC225Cd675\",\n    \"telos-testnet\": \"0x83c73Da98cf733B03315aFa8758834b36a195b87\",\n    \"tenet-mainnet\": \"0x2D61DCDD36F10b22176E0433B86F74567d529aAa\",\n    \"tenet-testnet\": \"0x6aB5Ae6822647046626e83ee6dB8187151E1d5ab\",\n    \"tomo-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"tomo-testnet\": \"0xae92d5aD7583AD66E49A0c67BAd18F6ba52dDDc1\",\n    \"xpla-testnet\": \"0x83c73Da98cf733B03315aFa8758834b36a195b87\",\n    \"zkconsensys-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"zkconsensys-testnet\": \"0x6aB5Ae6822647046626e83ee6dB8187151E1d5ab\",\n    \"zkpolygon-mainnet\": \"0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4\",\n    \"zkpolygon-testnet\": \"0x6aB5Ae6822647046626e83ee6dB8187151E1d5ab\",\n    \"zksync-mainnet\": \"0x9b896c0e23220469C7AE69cb4BbAE391eAa4C8da\",\n    \"zksync-testnet\": \"0x093D2CF57f764f09C3c2Ac58a42A2601B8C79281\",\n    \"zora-mainnet\": \"0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7\",\n    \"zora-testnet\": \"0x83c73Da98cf733B03315aFa8758834b36a195b87\"\n}","import { readFileSync } from 'fs'\n\nconst GNOSIS_SAFE_FILE_ENCODING = 'utf-8'\n\n/**\n * Gnosis Safe configuration for a specific network.\n */\ntype SafeConfig = {\n    safeAddress: string\n    url: string\n    contractNetworks?: ContractNetworks\n}\n\n/**\n * Contract addresses for each network.\n */\ntype ContractNetworks = {\n    [chainListId: string]: {\n        multiSendAddress: string\n        safeMasterCopyAddress: string\n        safeProxyFactoryAddress: string\n    }\n}\n\n/**\n * Converts a ContractNetworks object to a string.\n * @param {ContractNetworks} contractNetworks The ContractNetworks object to convert.\n */\nexport const toContractNetworksString = (contractNetworks?: ContractNetworks): string => {\n    if (contractNetworks === undefined) {\n        return ''\n    }\n    return Object.entries(contractNetworks).reduce((accumulator, [chainListId, config]) => {\n        return accumulator + `contractNetworks[chainListId=${chainListId}, multiSendAddress=${config.multiSendAddress}, safeMasterCopyAddress=${config.safeMasterCopyAddress}, safeProxyFactoryAddress=${config.safeProxyFactoryAddress}]`;\n    }, '');\n}\n\n/**\n * Gnosis Safe configuration per network.\n */\nexport interface SafeConfigs {\n    [chainName: string]: SafeConfig\n}\n\n/**\n * Reads the safe config file and returns the parsed SafeConfigs.\n * @param {string} fileName The name of the safe config file.\n */\nexport const getSafeConfigs = (fileName: string): SafeConfigs => {\n    return JSON.parse(readFileSync(fileName, GNOSIS_SAFE_FILE_ENCODING)) as SafeConfigs\n}","import { cli } from \"cli-ux\";\nimport fs from \"fs\";\nimport chalk from \"chalk\";\nimport { Transaction, NetworkTransactions } from \"./crossChainHelper\";\n\nexport const promptToProceed = async (msg: string, noPrompt: boolean = false) => {\n\tif (!noPrompt) {\n\t\tconst proceed = await cli.prompt(`${msg} Y/N`);\n\t\tif (![\"y\", \"yes\"].includes(proceed.toLowerCase())) {\n\t\t\tprocess.exit(0);\n\t\t}\n\t}\n}\n\nexport const arrayToCsv = (columns: string[], data: any) => \n\tcolumns.join(\",\").concat(\"\\n\").concat(data.map((row: any) => row\n\t\t.map(String) // convert every value to String\n\t\t.map((v: any) => (v === \"undefined\" ? \"\" : v))\n\t\t.map((v: any) => v.replace(/\"/g, '\"\"')) // escape double colons\n\t\t.map((v: any) => `\"${v}\"`) // quote it\n\t\t.join(\",\") // comma-separated\n\t)\n\t.join(\"\\r\\n\") // rows starting on new lines\n)\n\nexport const writeToCsv = async (fileName: string, columns: string[], transactionByNetwork: any[]) => {\n\tconst data = transactionByNetwork.reduce((acc, { network, transactions }) => {\n\t\ttransactions.forEach((tx: any) => {\n\t\t\tacc.push([\n\t\t\t\tnetwork,\n\t\t\t\t...columns.map((key) => {\n\t\t\t\t\tconst keys = key.split(\"/\");\n\t\t\t\t\tfor (const field in tx) {\n\t\t\t\t\t\tif (keys.includes(field)) {\n\t\t\t\t\t\t\tif (typeof tx[field] === \"object\") {\n\t\t\t\t\t\t\t\treturn JSON.stringify(tx[field]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn tx[field];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t]);\n\t\t});\n\t\treturn acc;\n\t}, []);\n\tfs.writeFileSync(fileName, arrayToCsv([\"network\"].concat(columns), data));\n\tconsole.log(`Transactions are written to: ${chalk.green(fileName)}`);\n}\n\nexport const printTransactions = (columns: string[], transactionByNetwork: NetworkTransactions[]) => {\n\tlet totalTransactionsNeedingChange: number = 0;\n\n\ttransactionByNetwork.forEach(({ network, transactions }) => {\n\t\tconsole.log(`\\n================================================`);\n\t\tconsole.log(chalk.green(`${network.toUpperCase()} transactions`));\n\t\tconsole.log(`================================================`);\n\t\tconst transactionsNeedingChange = transactions.filter((tx: Transaction) => tx.needChange);\n\t\ttotalTransactionsNeedingChange += transactionsNeedingChange.length;\n\n\t\tif (!transactionsNeedingChange.length) {\n\t\t\tconsole.log(\"No changes needed\\n\");\n\t\t} else {\n\t\t\tconsole.table(transactionsNeedingChange, columns);\n\t\t}\n\t})\n}\n\nexport const logError = (message: string, includeErrorText: boolean = true) => console.log(chalk.red(includeErrorText ? `ERROR: ${message}` : message));\nexport const logWarning = (message: string) => console.log(chalk.yellow(`WARNING: ${message}`));\nexport const logSuccess = (message: string) => console.log(chalk.green(`${message}`));\nexport const configExist = (fileName: string) => fs.existsSync(fileName);\nexport const getConfig = (fileName: string) => JSON.parse(fs.readFileSync(fileName, \"utf-8\"));","import { Transaction, getLayerZeroChainId, getContractInstance } from \"./crossChainHelper\";\n\nexport async function setUseCustomAdapterParams(hre: any, localNetwork: string, localContractNameOrAddress: string, useCustom: boolean): Promise<Transaction[]> {\n\tconst localContract = await getContractInstance(hre, localNetwork, localContractNameOrAddress)\n\tconst cur = await localContract.useCustomAdapterParams();\n\tconst needChange = cur !== useCustom;\n\n\t// function setUseCustomAdapterParams(bool _useCustomAdapterParams)\n\tconst functionName = \"setUseCustomAdapterParams\";\n\tconst params = [\"bool\"];\n\tlet args = [useCustom];\n\n\tconst tx: any = {\n\t\tneedChange,\n\t\tchainId: getLayerZeroChainId(localNetwork),\n\t\tcontractName: localContractNameOrAddress,\n\t\tfunctionName: functionName,\n\t\targs: args,\n\t\tcalldata: localContract.interface.encodeFunctionData(functionName, args)\n\t};\n\tif (tx.needChange) {\n\t\ttx.diff = JSON.stringify({ useCustomAdapterParams: { oldValue: cur, newValue: useCustom } });\n\t}\n\treturn [tx];\n}\n\nexport async function setMinDstGas(hre: any, localNetwork: string, localContractNameOrAddress: string, minDstGasConfig: any, remoteChainId: string): Promise<Transaction[]> {\n\tconst txns: Transaction[] = [];\n\tconst localContract = await getContractInstance(hre, localNetwork, localContractNameOrAddress)\n    const packetTypes = Object.keys(minDstGasConfig);\n    for(const packet of packetTypes) {\n\t\tlet packetType = parseInt(packet.at(-1) as string);\n\t\tconst minGas = minDstGasConfig[packet];\n\t\tconst cur = (await localContract.minDstGasLookup(remoteChainId, packetType)).toNumber();\n\t\tconst needChange = cur !== minGas;\n\n\t\t// function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas)\n\t\tconst functionName = \"setMinDstGas\";\n\t\tconst params = [\"uint16\", \"uint16\", \"uint256\"];\n\t\tlet args = [remoteChainId, packetType, minGas];\n\n\t\tconst tx: any = {\n\t\t\tneedChange,\n\t\t\tchainId: getLayerZeroChainId(localNetwork),\n\t\t\tcontractName: localContractNameOrAddress,\n\t\t\tfunctionName,\n\t\t\targs: args,\n\t\t    calldata: localContract.interface.encodeFunctionData(functionName, args)\n\t\t};\n\t\tif (tx.needChange) {\n\t\t\ttx.diff = JSON.stringify({ oldValue: cur, newValue: minGas });\n\t\t}\n\t\ttxns.push(tx);\n    }\n\treturn txns;\n}\n\nexport async function setTrustedRemote(hre: any, localNetwork: string, localContractNameOrAddress: string, remoteNetwork: string, remoteContractNameOrAddress: string): Promise<Transaction[]> {\n\tconst localContract = await getContractInstance(hre, localNetwork, localContractNameOrAddress)\n\tconst remoteContract = await getContractInstance(hre, remoteNetwork, remoteContractNameOrAddress)\n\n\tconst remoteContractAddress = await remoteContract.address;\n\tconst desiredTrustedRemote = hre.ethers.utils.solidityPack([\"bytes\"], [remoteContractAddress + localContract.address.substring(2)]);\n\n\tconst remoteChainId = getLayerZeroChainId(remoteNetwork);\n\tconst cur = await localContract.trustedRemoteLookup(remoteChainId);\n\tconst needChange = cur != desiredTrustedRemote;\n\n\t// function setTrustedRemote(uint16 _srcChainId, bytes calldata _path)\n\tconst functionName = \"setTrustedRemote\";\n\tconst params = [\"uint16\", \"bytes\"];\n\tlet args = [remoteChainId, desiredTrustedRemote];\n\n\tconst tx: any = {\n\t\tneedChange,\n\t\tchainId: getLayerZeroChainId(localNetwork),\n\t\tcontractName: localContractNameOrAddress,\n\t\tfunctionName: functionName,\n\t\targs: args,\n        calldata: localContract.interface.encodeFunctionData(functionName, args)\n\t};\n\tif (tx.needChange) {\n\t\ttx.diff = JSON.stringify({ trustedRemote: { oldValue: cur, newValue: desiredTrustedRemote } });\n\t}\n\treturn [tx];\n}\n\nexport function getContractNameOrAddress(chain: string, WIRE_UP_CONFIG: any) {\n\tlet contractNameOrAddress;\n\tconst proxyChain = WIRE_UP_CONFIG?.proxyContractConfig?.chain;\n\tif (proxyChain === chain) {\n\t\tif (WIRE_UP_CONFIG?.proxyContractConfig?.name) {\n\t\t\tcontractNameOrAddress = WIRE_UP_CONFIG?.proxyContractConfig?.name;\n\t\t} else if (WIRE_UP_CONFIG?.proxyContractConfig?.address) {\n\t\t\tcontractNameOrAddress = WIRE_UP_CONFIG?.proxyContractConfig?.address;\n\t\t}\n\t} else {\n\t\tif (WIRE_UP_CONFIG?.contractConfig?.name) {\n\t\t\tcontractNameOrAddress = WIRE_UP_CONFIG?.contractConfig?.name;\n\t\t} else if (WIRE_UP_CONFIG?.chainConfig?.[chain]?.name) {\n\t\t\tcontractNameOrAddress = WIRE_UP_CONFIG?.chainConfig?.[chain]?.name;\n\t\t} else if (WIRE_UP_CONFIG?.chainConfig?.[chain]?.address) {\n\t\t\tcontractNameOrAddress = WIRE_UP_CONFIG?.chainConfig?.[chain]?.address;\n\t\t}\n\t}\n\treturn contractNameOrAddress;\n}","import { Transaction, NetworkTransactions, getContractInstance, getLayerZeroChainId, executeTransactions } from \"./utils/crossChainHelper\";\nimport { configExist, getConfig, logError, printTransactions } from \"./utils/helpers\";\nimport { setUseCustomAdapterParams, setMinDstGas, setTrustedRemote, getContractNameOrAddress } from \"./utils/wireAllHelpers\";\n\nexport default async function (taskArgs: any, hre: any) {\n\tif (!configExist(taskArgs.configPath)) {\n\t\tlogError(`Wire up config file is not found.`);\n\t\treturn;\n\t}\n\n\tif (taskArgs.n && !configExist(taskArgs.gnosisConfigPath)) {\n\t\tlogError(`Gnosis config file not found`);\n\t\treturn;\n\t}\n\n    const deployer = (await hre.getNamedAccounts()).deployer;\n\tconsole.log(`CURRENT SIGNER: ${deployer}`);\n\n    const WIRE_UP_CONFIG = getConfig(taskArgs.configPath);\n\tconst localNetworks = Object.keys(WIRE_UP_CONFIG?.chainConfig)\n\n\tconsole.log(`************************************************`);\n\tconsole.log(`Computing diff`);\n\tconsole.log(`************************************************`);\n\n\tlet transactionByNetwork: NetworkTransactions[] = await Promise.all(\n\t\tlocalNetworks.map(async (localNetwork) => {\n            // array of transactions to execute\n            const transactions: Transaction[] = [];\n            const remoteNetworks = Object.keys(WIRE_UP_CONFIG?.chainConfig?.[localNetwork]?.remoteNetworkConfig)\n\n\t\t\tlet localContractNameOrAddress = getContractNameOrAddress(localNetwork, WIRE_UP_CONFIG);\n\t\t\tif (localContractNameOrAddress === undefined) {\n\t\t\t\tlogError(`Invalid wire up config for localContractNameOrAddress.`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// check if useCustomAdapterParams needs to be set\n\t\t\tconst useCustomAdapterParams = WIRE_UP_CONFIG?.chainConfig?.[localNetwork]?.useCustomAdapterParams;\n\t\t\tif (useCustomAdapterParams !== undefined) {\n\t\t\t\ttransactions.push(...(await setUseCustomAdapterParams(hre, localNetwork, localContractNameOrAddress, useCustomAdapterParams)));\n\t\t\t}\n\n\t\t\t// check if defaultFeeBp needs to be set\n\t\t\tconst defaultFeeBp = WIRE_UP_CONFIG?.chainConfig?.[localNetwork]?.defaultFeeBp;\n\t\t\tif (defaultFeeBp !== undefined) {\n\t\t\t\ttransactions.push(...(await setDefaultFeeBp(hre, localNetwork, localContractNameOrAddress, defaultFeeBp)));\n\t\t\t}\n\n\t\t\tawait Promise.all(\n\t\t\t\tremoteNetworks.map(async (remoteNetwork) => {\n\t\t\t\t\t// skip wiring itself\n\t\t\t\t\tif (localNetwork === remoteNetwork) return;\n\t\t\t\t\tconst proxyChain = WIRE_UP_CONFIG?.proxyContractConfig?.chain;\n\n\t\t\t\t\tlet remoteContractNameOrAddress = getContractNameOrAddress(remoteNetwork, WIRE_UP_CONFIG);\n\t\t\t\t\tif (remoteContractNameOrAddress === undefined) {\n\t\t\t\t\t\tlogError(`Invalid wire up config for remoteContractNameOrAddress.`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// setTrustedRemote\n\t\t\t\t\ttransactions.push(...(await setTrustedRemote(hre, localNetwork, localContractNameOrAddress, remoteNetwork, remoteContractNameOrAddress)));\n\n\t\t\t\t\t// setFeeBp\n\t\t\t\t\tif (WIRE_UP_CONFIG?.chainConfig?.[localNetwork]?.remoteNetworkConfig?.[remoteNetwork]?.feeBpConfig !== undefined) {\n\t\t\t\t\t\ttransactions.push(...(await setFeeBp(hre, localNetwork, localContractNameOrAddress, WIRE_UP_CONFIG?.chainConfig?.[localNetwork]?.remoteNetworkConfig?.[remoteNetwork].feeBpConfig, getLayerZeroChainId(remoteNetwork))));\n\t\t\t\t\t}\n\n\t\t\t\t\t// setMinDstGas\n\t\t\t\t\tif (WIRE_UP_CONFIG?.chainConfig?.[localNetwork]?.remoteNetworkConfig?.[remoteNetwork]?.minDstGasConfig !== undefined) {\n\t\t\t\t\t\ttransactions.push(...(await setMinDstGas(hre, localNetwork, localContractNameOrAddress, WIRE_UP_CONFIG?.chainConfig?.[localNetwork]?.remoteNetworkConfig?.[remoteNetwork].minDstGasConfig, getLayerZeroChainId(remoteNetwork))));\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tnetwork: localNetwork,\n\t\t\t\ttransactions: transactions,\n\t\t\t};\n\t\t})\n\t) as NetworkTransactions[];\n\n\tconst noChanges = transactionByNetwork.reduce((acc, { transactions }) => {\n\t\tacc += transactions.filter((transaction) => transaction.needChange).length;\n\t\treturn acc;\n\t}, 0);\n\tif (noChanges == 0) {\n\t\t//early return\n\t\tconsole.log(\"No changes needed\");\n\t\treturn;\n\t}\n\tconst columns = [\"needChange\", \"chainId\", \"contractName\", \"functionName\", \"args\", \"diff\"];\n\tprintTransactions(columns, transactionByNetwork);\n    await executeTransactions(hre, taskArgs, transactionByNetwork);\n};\n\nasync function setDefaultFeeBp(hre: any, localNetwork: string, localContractNameOrAddress: string, defaultFeeBp: number): Promise<Transaction[]> {\n\tconst localContract = await getContractInstance(hre, localNetwork, localContractNameOrAddress)\n\tconst cur = await localContract.defaultFeeBp();\n\tconst needChange = cur !== defaultFeeBp;\n\n\t// function setDefaultFeeBp(uint16 _feeBp)\n\tconst functionName = \"setDefaultFeeBp\";\n\tconst params = [\"uint16\"];\n\tlet args = [defaultFeeBp];\n\n\tconst tx: any = {\n\t\tneedChange,\n\t\tchainId: getLayerZeroChainId(localNetwork),\n\t\tcontractName: localContractNameOrAddress,\n\t\tfunctionName: functionName,\n\t\targs: args,\n\t\tcalldata: localContract.interface.encodeFunctionData(functionName, args)\n\t};\n\tif (tx.needChange) {\n\t\ttx.diff = JSON.stringify({ defaultFeeBp: { oldValue: cur, newValue: defaultFeeBp } });\n\t}\n\treturn [tx];\n}\n\nasync function setFeeBp(hre: any, localNetwork: string, localContractNameOrAddress: string, feeBpConfig: any, remoteChainId: string): Promise<Transaction[]> {\n\tconst localContract = await getContractInstance(hre, localNetwork, localContractNameOrAddress)\n\tconst feeConfig = await localContract.chainIdToFeeBps(remoteChainId);\n\tconst curFeeBp = feeConfig[0];\n\tconst curEnabled = feeConfig[1];\n\tconst needChange = curFeeBp !== feeBpConfig.feeBp || curEnabled !== feeBpConfig.enabled;\n\n\t// function setFeeBp(uint16 _dstChainId, bool _enabled, uint16 _feeBp)\n\tconst functionName = \"setFeeBp\";\n\tconst params = [\"uint16\", \"bool\", \"uint16\"];\n\tconst args = [remoteChainId, feeBpConfig.enabled, feeBpConfig.feeBp];\n\tconst calldata = localContract.interface.encodeFunctionData(functionName, args);\n\n\tconst tx: any = {\n\t\tneedChange,\n\t\tchainId: getLayerZeroChainId(localNetwork),\n\t\tcontractName: localContractNameOrAddress,\n\t\tfunctionName: functionName,\n\t\targs: args,\n\t\tcalldata: localContract.interface.encodeFunctionData(functionName, args)\n\t};\n\tif (tx.needChange) {\n\t\ttx.diff = JSON.stringify({ feeBp: { oldFeeBpValue: curFeeBp, newFeeBpValue: feeBpConfig.feeBp, oldEnabledFee: curEnabled, newEnabledFee: feeBpConfig.enabled } });\n\t}\n\treturn [tx];\n}","import { promptToProceed, writeToCsv, logError, logWarning, printTransactions, logSuccess, configExist, getConfig } from \"./utils/helpers\";\nimport { executeTransaction, executeGnosisTransactions, getContractAt, getWalletContractAt, Transaction, getContract, getWalletContract, getApplicationConfig, getEndpointAddress, getLayerZeroChainId } from \"./utils/crossChainHelper\";\nimport { ENDPOINT_ABI, MESSAGING_LIBRARY_ABI, USER_APPLICATION_ABI } from \"./constants/abi\";\nimport { utils } from \"ethers\";\n\n// Application config types from UltraLightNodeV2 contract\nconst CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION = 1;\nconst CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS = 2;\nconst CONFIG_TYPE_RELAYER = 3;\nconst CONFIG_TYPE_OUTBOUND_PROOF_TYPE = 4;\nconst CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS = 5;\nconst CONFIG_TYPE_ORACLE = 6;\n\nexport default  async (taskArgs: any, hre: any) => {\n\tconst configPath = taskArgs.configPath;\n\tconst name = taskArgs.name;\n\tconst address = taskArgs.address;\n\tconst gnosisConfigPath = taskArgs.gnosisConfigPath;\n\tconst sendToGnosis = gnosisConfigPath && configExist(gnosisConfigPath);\n\n\tif (!configExist(configPath)) {\n\t\tlogError(`User application config file is not found`);\n\t\treturn;\n\t}\n\n\tconst config = getConfig(configPath);\n\tconst networks = Object.keys(config);\n\n\tconst transactionByNetwork: any[] = (\n\t\tawait Promise.all(\n\t\t\tnetworks.map(async (network: string) => {\n\t\t\t\tconst transactions: Transaction[] = [];\n\t\t\t\tconst chainId = getLayerZeroChainId(network);\n\t\t\t\tconst networkConfig = config[network];\n\n\t\t\t\tif (!networkConfig) return;\n\t\t\t\tconst endpoint = await getContractAt(hre, network, ENDPOINT_ABI, getEndpointAddress(network));\n\n\t\t\t\tconst contractName =  networkConfig.name ?? name;\n\t\t\t\tconst contractAddress = networkConfig.address ?? address;\n\n\t\t\t\tif (!contractName && !contractAddress) {\n\t\t\t\t\tlogWarning(`Contract information isn't found for ${network}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst app = contractName ? await getContract(hre, network, contractName) : await getContractAt(hre, network, USER_APPLICATION_ABI, contractAddress);\n\t\t\t\tconst appConfig = await endpoint.uaConfigLookup(app.address);\n\t\t\t\tconst sendLibraryAddress = appConfig.sendVersion === 0 ? await endpoint.defaultSendLibrary() : appConfig.sendLibrary;\n\t\t\t\tconst sendLibrary = await getContractAt(hre, network, MESSAGING_LIBRARY_ABI, sendLibraryAddress);\n\t\t\t\tlet receiveLibrary: any;\n\n\t\t\t\tif (appConfig.sendVersion !== appConfig.receiveVersion) {\n\t\t\t\t\tconst receiveLibraryAddress = appConfig.receiveVersion === 0 ? await endpoint.defaultReceiveLibraryAddress() : appConfig.receiveLibraryAddress;\n\t\t\t\t\treceiveLibrary = await getContractAt(hre, network, MESSAGING_LIBRARY_ABI, receiveLibraryAddress);\n\t\t\t\t}\n\n\t\t\t\tif (networkConfig.sendVersion) {\n\t\t\t\t\ttransactions.push(...(await setSendVersion(chainId, app, appConfig.sendVersion, networkConfig.sendVersion)));\n\t\t\t\t}\n\n\t\t\t\tif (networkConfig.receiveVersion) {\n\t\t\t\t\ttransactions.push(...(await setReceiveVersion(chainId, app, appConfig.receiveVersion, networkConfig.receiveVersion)));\n\t\t\t\t}\n\n\t\t\t\tconst remoteConfigs = networkConfig.remoteConfigs;\n\t\t\t\tconst newSendVersion = networkConfig.sendVersion ?? appConfig.sendVersion;\n\t\t\t\tconst newReceiveVersion = networkConfig.receiveVersion ?? appConfig.receiveVersion;\n\n\t\t\t\tif (remoteConfigs) {\n\t\t\t\t\tawait Promise.all(\n\t\t\t\t\t\tremoteConfigs.map(async (newConfig: any) => {\n\t\t\t\t\t\t\tif (newConfig.remoteChain === network) return;\n\n\t\t\t\t\t\t\tconst oldConfig = await getApplicationConfig(newConfig.remoteChain, sendLibrary, receiveLibrary, app.address);\n\t\t\t\t\t\t\tconst remoteChainId = getLayerZeroChainId(newConfig.remoteChain);\n\n\t\t\t\t\t\t\tif (newConfig.inboundProofLibraryVersion) {\n\t\t\t\t\t\t\t\ttransactions.push(...(await setConfig(newReceiveVersion, chainId, remoteChainId, app, CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION, \"uint16\", oldConfig.inboundProofLibraryVersion, newConfig.inboundProofLibraryVersion)));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (newConfig.inboundBlockConfirmations) {\n\t\t\t\t\t\t\t\ttransactions.push(...(await setConfig(newReceiveVersion, chainId, remoteChainId, app, CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS, \"uint64\", oldConfig.inboundBlockConfirmations, newConfig.inboundBlockConfirmations)));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (newConfig.relayer) {\n\t\t\t\t\t\t\t\ttransactions.push(...(await setConfig(newSendVersion, chainId, remoteChainId, app, CONFIG_TYPE_RELAYER, \"address\", oldConfig.relayer, newConfig.relayer)));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (newConfig.outboundProofType) {\n\t\t\t\t\t\t\t\ttransactions.push(...(await setConfig(newSendVersion, chainId, remoteChainId, app, CONFIG_TYPE_OUTBOUND_PROOF_TYPE, \"uint16\", oldConfig.outboundProofType, newConfig.outboundProofType)));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (newConfig.outboundBlockConfirmations) {\n\t\t\t\t\t\t\t\ttransactions.push(...(await setConfig(newSendVersion, chainId, remoteChainId, app, CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS, \"uint64\", oldConfig.outboundBlockConfirmations, newConfig.outboundBlockConfirmations)));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (newConfig.oracle) {\n\t\t\t\t\t\t\t\ttransactions.push(...(await setConfig(newSendVersion, chainId, remoteChainId, app, CONFIG_TYPE_ORACLE, \"address\", oldConfig.oracle, newConfig.oracle)));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tnetwork: network,\n\t\t\t\t\ttransactions,\n\t\t\t\t};\n\t\t\t})\n\t\t)\n\t) as any[];\n\n\tconst totalTransactionsNeedingChange = transactionByNetwork.reduce((count, { transactions }) => {\n\t\tcount += transactions.filter((tx: Transaction) => tx.needChange).length;\n\t\treturn count;\n\t}, 0);\n\n\tif (totalTransactionsNeedingChange == 0) {\n\t\tconsole.log(\"No changes needed\");\n\t\treturn;\n\t}\n\n\tconst columns = [\"chainId\", \"remoteChainId\", \"contractAddress\", \"functionName\", \"args\", \"diff\"];\n\tprintTransactions(columns, transactionByNetwork);\n\twriteToCsv(\"setConfigTransactions.csv\", columns, transactionByNetwork);\n\tawait promptToProceed(`Would you like to proceed with the above instructions ${sendToGnosis ? \"in Gnosis?\" : \"?\"}`);\n\n\tconst errors: any[] = [];\n\tconst print: any = {};\n\tlet previousPrintLine = 0;\n\tconst printResult = () => {\n\t\tif (previousPrintLine) {\n\t\t\tprocess.stdout.moveCursor(0, -previousPrintLine);\n\t\t}\n\t\tif (Object.keys(print)) {\n\t\t\tpreviousPrintLine = Object.keys(print).length + 4;\n\t\t\tconsole.table(Object.keys(print).map((network) => ({ network, ...print[network] })));\n\t\t}\n\t};\n\n\tif (sendToGnosis) {\n\t\tconst gnosisConfig = getConfig(gnosisConfigPath);\n\t\tawait Promise.all(\n\t\t\ttransactionByNetwork.map(async ({ network, transactions }) => {\n\t\t\t\tconst transactionToCommit = transactions.filter((transaction: Transaction) => transaction.needChange);\n\t\t\t\tprint[network] = print[network] || { requests: \"1/1\" };\n\t\t\t\tprint[network].current = `executeGnosisTransactions: ${transactionToCommit}`;\n\t\t\t\ttry {\n\t\t\t\t\tawait executeGnosisTransactions(hre, network, gnosisConfig, transactionToCommit);\n\t\t\t\t\tprint[network].requests = \"1/1\";\n\t\t\t\t} catch (err: any) {\n\t\t\t\t\terrors.push({ network, err });\n\t\t\t\t\tprint[network].current = err.message;\n\t\t\t\t\tprint[network].err = true;\n\t\t\t\t}\n\t\t\t})\n\t\t)\n\t\tprintResult();\n\t\tif (errors.length) {\n\t\t\tlogError(`\\nFinished with ${errors.length === 1 ? \"an error\" : `${errors.length} errors`}`, false);\n\t\t\terrors.forEach((x) => {\n\t\t\t\tconsole.log(x.err);\n\t\t\t\tconsole.log();\n\t\t\t})\n\t\t}\n\t} else {\n\t\tawait Promise.all(\n\t\t\ttransactionByNetwork.map(async ({ network, transactions }) => {\n\t\t\t\tconst transactionToCommit = transactions.filter((transaction: any) => transaction.needChange);\n\t\t\t\tconst networkConfig = config[network];\n\t\t\t\tconst contractName = networkConfig.name ?? name;\n\t\t\t\tconst contractAddress = networkConfig.address ?? address;\n\t\t\t\tconst app = contractName ? await getWalletContract(hre, network, contractName) : await getWalletContractAt(hre, network, USER_APPLICATION_ABI, contractAddress);\n\n\t\t\t\tlet successTx = 0;\n\t\t\t\tprint[network] = print[network] || { requests: `${successTx}/${transactionToCommit.length}` };\n\t\t\t\tfor (let transaction of transactionToCommit) {\n\t\t\t\t\tprint[network].current = `${transaction.functionName}(${transaction.args})`;\n\t\t\t\t\tprintResult();\n\t\t\t\t\ttry {\n                        const gasLimit = taskArgs.gasLimit;\n\t\t\t\t\t\tconst tx = await executeTransaction(hre, network, transaction, gasLimit, app);\n\t\t\t\t\t\tprint[network].past = `${transaction.functionName}(${transaction.args}) (${tx.transactionHash})`;\n\t\t\t\t\t\tsuccessTx++;\n\t\t\t\t\t\tprint[network].requests = `${successTx}/${transactionToCommit.length}`;\n\t\t\t\t\t\tprintResult();\n\t\t\t\t\t} catch (err: any) {\n\t\t\t\t\t\tlogError(`Failing to call ${transaction.contractName}.${transaction.functionName} on ${network} with an error ${err}`);\n\t\t\t\t\t\terrors.push({ network, err });\n\t\t\t\t\t\tprint[network].current = err;\n\t\t\t\t\t\tprint[network].err = true;\n\t\t\t\t\t\tprintResult();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tif (!errors.length) {\n\t\tlogSuccess(\"\\nFinished successfully\");\n\t}\n}\n\nconst setSendVersion = async (chainId: string, app: any, oldSendVersion: any, newSendVersion: any): Promise<Transaction[]> => {\n\tconst needChange = oldSendVersion !== newSendVersion;\n\tconst contractAddress = app.address;\n\tconst functionName = \"setSendVersion\";\n\tconst args = [newSendVersion];\n\tconst calldata = app.interface.encodeFunctionData(functionName, args);\n\tconst diff = needChange ? { oldValue: oldSendVersion, newValue: newSendVersion } : undefined;\n\n\treturn [{ needChange, chainId, contractAddress, functionName, args, calldata, diff }];\n}\n\nconst setReceiveVersion = async (chainId: string, app: any, currentReceiveVersion: any, newReceiveVersion: any): Promise<Transaction[]> => {\n\tconst needChange = currentReceiveVersion !== newReceiveVersion;\n\tconst contractAddress = app.address;\n\tconst functionName = \"setReceiveVersion\";\n\tconst args = [newReceiveVersion];\n\tconst calldata = app.interface.encodeFunctionData(functionName, args);\n\tconst diff = needChange ? { oldValue: currentReceiveVersion, newValue: newReceiveVersion } : undefined;\n\n\treturn [{ needChange, chainId, contractAddress, functionName, args, calldata, diff }];\n}\n\nconst setConfig = async (configVersion: any, chainId: string, remoteChainId: string, app: any, configType: number, configValueType: string, oldValue: any, newValue: any): Promise<Transaction[]> => {\n\tconst newConfig = utils.defaultAbiCoder.encode([configValueType], [newValue]);\n\tconst contractAddress = app.address;\n\tconst functionName = \"setConfig\";\n\tconst args = [configVersion, remoteChainId, configType, newConfig];\n\tconst needChange = oldValue !== newValue;\n\tconst calldata = app.interface.encodeFunctionData(functionName, args);\n\tconst diff = needChange ? { oldValue, newValue } : undefined;\n\n\treturn [{ needChange, chainId, remoteChainId, contractAddress, functionName, args, calldata, diff }];\n}","import { ethers } from \"ethers\";\nimport { getProvider, getLayerZeroChainId, getEndpointAddress } from \"./utils/crossChainHelper\";\nconst { ENDPOINT_ABI, MESSAGING_LIBRARY_ABI } = require(\"./constants/abi\")\n\nexport default  async (taskArgs: any, hre: any) => {\n    const networks = taskArgs.networks.split(\",\");\n\n    const configByNetwork =  await Promise.all(\n        networks.map(async (network: string) => {\n            const provider = getProvider(hre, network);\n            console.log()\n            const endpoint = new ethers.Contract(getEndpointAddress(network), ENDPOINT_ABI, provider);\n            const sendVersion = await endpoint.defaultSendVersion();\n            const receiveVersion = await endpoint.defaultReceiveVersion();\n            const sendLibraryAddress = await endpoint.defaultSendLibrary();\n            const messagingLibrary = new ethers.Contract(sendLibraryAddress, MESSAGING_LIBRARY_ABI, provider);\n            const config = await messagingLibrary.defaultAppConfig(getLayerZeroChainId(network));\n\n            return {\n                network,\n                sendVersion,\n                receiveVersion,\n                inboundProofLibraryVersion: config.inboundProofLibraryVersion,\n                inboundBlockConfirmations: config.inboundBlockConfirmations.toNumber(),\n                relayer: config.relayer,\n                outboundProofType: config.outboundProofType,\n                outboundBlockConfirmations: config.outboundBlockConfirmations.toNumber(),\n                oracle: config.oracle,\n            };\n        })\n    )\n\n    console.table(configByNetwork);\n}","import { ethers } from 'ethers'\nimport { backOff } from 'exponential-backoff'\nimport { writeFile } from 'fs/promises'\nimport {\n    ActionType,\n    HardhatRuntimeEnvironment,\n    TaskArguments\n} from 'hardhat/types'\nimport {\n    getProvider,\n    getLayerZeroChainId,\n    getEndpointAddress,\n    getContractAt,\n    getApplicationConfig,\n    getDeploymentAddress,\n} from './utils/crossChainHelper'\nimport { ENDPOINT_ABI, MESSAGING_LIBRARY_ABI } from './constants/abi'\n\n/**\n * Arguments to generate default config for the mesh of networks.\n */\ninterface GenerateDefaultConfigTaskArgs {\n    /**\n     * Comma separated list of networks.\n     */\n    networks: string\n\n    /**\n     * The name of the deployed UserApplication.\n     */\n    name?: string\n\n    /**\n     * The path to the output file.\n     */\n    outputFileName: string\n\n    /**\n     * The checkConnection function fragment.  The contract function should be of the form:\n     *\n     * <code>function trustedRemoteLookup(uint16) public view returns (bytes)</code>\n     *\n     * The only part that may change is the function name.\n     */\n    checkConnectionFunctionFragment: string\n}\n\n/**\n * Remote config for a chain path.\n */\ninterface RemoteConfig {\n    /**\n     * Remote network name.\n     */\n    remoteChain: string,\n\n    /**\n     * The default inbound proof library version for the chain path.\n     */\n    inboundProofLibraryVersion: number,\n\n    /**\n     * The default inbound block confirmations for the chain path.\n     */\n    inboundBlockConfirmations: number,\n\n    /**\n     * The default relayer for the chain path.\n     */\n    relayer: string,\n\n    /**\n     * The default outbound proof type for the chain path.\n     */\n    outboundProofType: number,\n\n    /**\n     * The default outbound block confirmations for the chain path.\n     */\n    outboundBlockConfirmations: number,\n\n    /**\n     * The default oracle for the chain path.\n     */\n    oracle: string,\n}\n\n/**\n * Config for a chain path.\n */\ninterface ChainPathConfig {\n    /**\n     * Local network name.\n     */\n    name?: string,\n\n    /**\n     * The local network contract address.\n     */\n    address?: string,\n\n    /**\n     * The default send library version for the local network.\n     */\n    sendVersion: number,\n\n    /**\n     * The default receive library version for the local network.\n     */\n    receiveVersion: number,\n\n    /**\n     * The default remote configs for the local network.\n     */\n    remoteConfigs: RemoteConfig[]\n}\n\n/**\n * Default config settings for the LayerZero network mesh.  Note: the network is directional.\n */\ninterface DefaultConfigMesh {\n    [network: string]: ChainPathConfig\n}\n\n/**\n * Input contracts configuration.\n */\ntype ContractConfigs = {\n    [network: string]: {\n        address: string,\n    }\n}\n\n/**\n * Gets the remote config for a chain path.\n * @param {string} remoteNetwork the remote network name\n * @param {ethers.Contract} sendLibrary the local send library contract\n * @param {ethers.Contract} receiveLibrary the local receive library contract\n * @param {string} contractAddress the contract address\n */\nconst getRemoteConfig = async(remoteNetwork: string, sendLibrary: ethers.Contract, receiveLibrary: ethers.Contract, contractAddress: string) => {\n    const appConfig = await backOff(async () => getApplicationConfig(remoteNetwork, sendLibrary, receiveLibrary, contractAddress))\n    // TODO memoize\n    const defaultAppConfig = await backOff(async () => sendLibrary.defaultAppConfig(getLayerZeroChainId(remoteNetwork)))\n\n    // If the appConfig is the default (0, AddressZero, etc.), then use the defaultAppConfig.\n    return {\n        remoteChain: remoteNetwork,\n        inboundProofLibraryVersion: appConfig.inboundProofLibraryVersion > 0 ? appConfig.inboundProofLibraryVersion : defaultAppConfig.inboundProofLibraryVersion,\n        inboundBlockConfirmations: appConfig.inboundBlockConfirmations > 0 ? appConfig.inboundBlockConfirmations : defaultAppConfig.inboundBlockConfirmations.toNumber(),\n        relayer: appConfig.relayer != ethers.constants.AddressZero ? appConfig.relayer : defaultAppConfig.relayer,\n        outboundProofType: appConfig.outboundProofType > 0 ? appConfig.outboundProofType : defaultAppConfig.outboundProofType,\n        outboundBlockConfirmations: appConfig.outboundBlockConfirmations > 0 ? appConfig.outboundBlockConfirmations : defaultAppConfig.outboundBlockConfirmations.toNumber(),\n        oracle: appConfig.oracle != ethers.constants.AddressZero ? appConfig.oracle : defaultAppConfig.oracle,\n    }\n}\n\n/**\n * Gets the remote configs for a list of chain paths.\n * @param {HardhatRuntimeEnvironment} hre the hardhat runtime environment\n * @param {string} network the local network name\n * @param {string} contractAddress the contract address\n * @param {string[]} remoteNetworks the remote network names\n * @param {ethers.Contract} sendLibrary the local send library contract\n * @param {ethers.Contract} receiveLibrary the local receive library contract\n * @param {string} checkConnectionFunctionFragment the checkConnection function fragment\n */\nconst getRemoteConfigs = async (\n    hre: HardhatRuntimeEnvironment,\n    network: string,\n    contractAddress: string,\n    remoteNetworks: string[],\n    sendLibrary: ethers.Contract,\n    receiveLibrary: ethers.Contract,\n    checkConnectionFunctionFragment: string\n): Promise<RemoteConfig[]> => {\n    const connectedRemoteNetworks = await Promise.all(\n        remoteNetworks.filter(async (remoteNetwork: string) => isConnected(hre, network, contractAddress, remoteNetwork, checkConnectionFunctionFragment)))\n    return Promise.all(connectedRemoteNetworks.map(async (remoteNetwork: string) => getRemoteConfig(remoteNetwork, sendLibrary, receiveLibrary, contractAddress)))\n}\n\n/**\n * Checks if a contract is connected to a remote network using checkConnectionFunctionFragment.\n * @param {HardhatRuntimeEnvironment} hre the hardhat runtime environment\n * @param {string} network the local network name\n * @param {string} contractAddress the contract address\n * @param {string} remoteNetwork the remote network name\n * @param {string} checkConnectionFunctionFragment the checkConnection function fragment\n */\nconst isConnected = async (\n    hre: HardhatRuntimeEnvironment,\n    network: string,\n    contractAddress: string,\n    remoteNetwork: string,\n    checkConnectionFunctionFragment: string\n): Promise<boolean> => {\n    const abi = [checkConnectionFunctionFragment]\n    const remoteChainId = getLayerZeroChainId(remoteNetwork)\n    const key = checkConnectionFunctionFragment.split(' ')[1]\n    const app = await getContractAt(hre, network, abi, contractAddress)\n    const val = await backOff(async () => app[key](remoteChainId))\n    return val.length > 0\n}\n\n/**\n * Get send/receive versions and Contracts.\n * @param {ethers.Contract} endpoint the endpoint contract\n * @param {string} contractAddress the contract address\n * @param {ethers.providers.JsonRpcProvider} provider the provider\n */\nconst getVersions = async(\n    endpoint: ethers.Contract,\n    contractAddress: string,\n    provider: ethers.providers.JsonRpcProvider\n): Promise<{\n    sendVersion: number,\n    receiveVersion: number,\n    sendLibrary: ethers.Contract,\n    receiveLibrary: ethers.Contract,\n}> => {\n    const {\n        sendVersion: uaSendVersion,\n        receiveVersion: uaReceiveVersion,\n        sendLibrary: uaSendLibraryAddress,\n        receiveLibraryAddress: uaReceiveLibraryAddress\n    } = await endpoint.uaConfigLookup(contractAddress)\n\n    let sendLibraryAddress: string, sendVersion: number\n    if (uaSendVersion === 0) {\n        sendLibraryAddress = await endpoint.defaultSendLibrary()\n        sendVersion = await endpoint.defaultSendVersion()\n    } else {\n        sendLibraryAddress = uaSendLibraryAddress\n        sendVersion = uaSendVersion\n    }\n    const sendLibrary = new ethers.Contract(sendLibraryAddress, MESSAGING_LIBRARY_ABI, provider)\n\n    let receiveLibraryAddress: string, receiveVersion: number\n    if (uaReceiveVersion === 0) {\n        receiveLibraryAddress = await endpoint.defaultReceiveLibraryAddress()\n        receiveVersion = await endpoint.defaultReceiveVersion()\n    } else {\n        receiveLibraryAddress = uaReceiveLibraryAddress\n        receiveVersion = uaReceiveVersion\n    }\n    const receiveLibrary = new ethers.Contract(receiveLibraryAddress, MESSAGING_LIBRARY_ABI, provider)\n\n    return {\n        sendVersion,\n        receiveVersion,\n        sendLibrary,\n        receiveLibrary,\n    }\n}\n\n/**\n * Gets the default config for the mesh of networks.\n * @param {HardhatRuntimeEnvironment} hre the hardhat runtime environment\n * @param {ContractConfigs} configs the contract configs\n * @param {string} checkConnectionFunctionFragment the checkConnection function fragment\n * @param {string} name the name of the deployed UserApplication\n */\nconst generateAppConfig = async (\n    hre: HardhatRuntimeEnvironment,\n    configs: ContractConfigs,\n    checkConnectionFunctionFragment: string,\n    name?: string,\n): Promise<DefaultConfigMesh> => {\n    const networks = Object.keys(configs)\n    return (networks.reduce(async (acc, network: string) => {\n        const provider = getProvider(hre, network)\n        const endpointAddress = getEndpointAddress(network)\n        const endpoint = new ethers.Contract(endpointAddress, ENDPOINT_ABI, provider)\n        const address = configs[network].address\n        const { sendVersion, sendLibrary, receiveVersion, receiveLibrary } = await getVersions(endpoint, address, provider)\n        const remoteConfigs = await getRemoteConfigs(hre, network, address, networks, sendLibrary, receiveLibrary, checkConnectionFunctionFragment)\n        return {\n            ...await acc,\n            [network]: {\n                ...(name && { name }),\n                sendVersion,\n                receiveVersion,\n                address,\n                remoteConfigs,\n            }\n        }\n    }, Promise.resolve({})))\n}\n\n//--------------------------------------------------------------------------------------------//\n//----------------------------------- HardHat Task Related -----------------------------------//\n//--------------------------------------------------------------------------------------------//\n\nconst getContractConfigs = (inputNetworks: string, name?: string): ContractConfigs => {\n    return inputNetworks.split(\",\").reduce((acc, inputNetwork) => {\n        const [key,value] = inputNetwork.split(\":\")\n        return {\n            ...acc,\n            [key]: {\n                address: value ? value : getDeploymentAddress(key, name!),\n            }\n        }\n    }, {})\n}\n\n/**\n * Sanity check the output file name format.\n * @param {string} fileName\n */\nconst checkOutputFileName = (fileName: string): void => {\n    if (!fileName) {\n        throw new Error(\"Output file name is required.\")\n    }\n    if (!fileName.endsWith(\".json\")) {\n        throw new Error(\"Output file name must end with .json.\")\n    }\n    if (fileName.startsWith(\"/\")) {\n        throw new Error(\"Output file name must be relative.\")\n    }\n}\n\n/**\n * Action to generate the default config for the mesh of networks.\n * @param {GenerateDefaultConfigTaskArgs} taskArgs the task arguments\n * @param {HardhatRuntimeEnvironment} hre\n */\nexport const generateAppConfigAction: ActionType<TaskArguments> = async (\n    taskArgs: GenerateDefaultConfigTaskArgs,\n    hre: HardhatRuntimeEnvironment\n): Promise<void> => {\n    const { networks: inputNetworks, name, outputFileName, checkConnectionFunctionFragment } = taskArgs\n    const configs = getContractConfigs(inputNetworks, name)\n    checkOutputFileName(outputFileName)\n    const defaultConfigMesh = await generateAppConfig(hre, configs, checkConnectionFunctionFragment, name)\n    await writeFile(outputFileName, JSON.stringify(defaultConfigMesh, null, 2))\n}","import {\n\tgetDeploymentAddresses,\n\tgetApplicationConfig,\n\tgetEndpointAddress,\n\tgetContractAt,\n} from './utils/crossChainHelper'\nimport { ENDPOINT_ABI, MESSAGING_LIBRARY_ABI } from  \"./constants/abi\";\nimport { logError } from \"./utils/helpers\";\n\nexport default async (taskArgs: any, hre: any) => {\n\tconst network = hre.network.name;\n\tconst remoteNetworks = taskArgs.remoteNetworks.split(\",\");\n\tconst contractName = taskArgs.name;\n\tlet contractAddress = taskArgs.address;\n\n\tif (!contractName && !contractAddress) {\n\t\tlogError(\"Provide contract name or address\");\n\t\treturn;\n\t}\t\n\n\tif (contractName && !contractAddress) {\n\t\tcontractAddress = getDeploymentAddresses(network, false)[contractName];\n\t\tif (!contractAddress) {\n\t\t\tlogError(`Deployment information isn't found for ${contractName}`);\n\t\t\treturn;\n\t\t}\n\t}\t\n\n\tconst endpoint = await getContractAt(hre, network, ENDPOINT_ABI, getEndpointAddress(network));\n\tconst appConfig = await endpoint.uaConfigLookup(contractAddress);\n\tconst sendVersion = appConfig.sendVersion;\n\tconst receiveVersion = appConfig.receiveVersion;\t\n\tconst sendLibraryAddress = sendVersion === 0 ? await endpoint.defaultSendLibrary() : appConfig.sendLibrary;\n\tconst sendLibrary = await getContractAt(hre, network, MESSAGING_LIBRARY_ABI, sendLibraryAddress);\n\tlet receiveLibrary: any;\n\n\tif (sendVersion !== receiveVersion){\n\t\tconst receiveLibraryAddress = receiveVersion === 0 ? await endpoint.defaultReceiveLibraryAddress() : appConfig.receiveLibraryAddress;\n\t\treceiveLibrary = await getContractAt(hre, network, MESSAGING_LIBRARY_ABI, receiveLibraryAddress);\n\t}\n\t\t\n\tconst remoteConfig: any[] = await Promise.all(\n\t\tremoteNetworks.map(async (remoteNetwork: string) => {\n\t\t\tif (network === remoteNetwork) return;\n\t\t\treturn await getApplicationConfig(remoteNetwork, sendLibrary, receiveLibrary, contractAddress);\n\t\t})\n\t)\n\n\tconsole.log(\"Network            \", network);\n\tconsole.log(\"Application address\", contractAddress);\n\tconsole.log(\"Send version       \", sendVersion);\n\tconsole.log(\"Receive version    \", receiveVersion);\n\tconsole.table(remoteConfig);\n}","import { getContract, getContractAt, getLayerZeroChainId } from \"./utils/crossChainHelper\";\nimport { logError } from \"./utils/helpers\";\nimport { LZ_APP_ABI } from \"./constants/abi\";\n\nexport default async function (taskArgs: any, hre: any) {\n    const localNetworks = taskArgs.chains.split(\",\");\n    const remoteNetworks = localNetworks;\n    const contractAddresses = taskArgs?.addresses?.split(\",\");\n\n\tlet checkWireAllConfigObj: { [key: string]: any } = {}\n    await Promise.all(\n        localNetworks.map(async (localNetwork: string, localIndex: number) => {\n            checkWireAllConfigObj[localNetwork] = {\n                useCustomAdapterParams: {},\n                withdrawalFeeBps: {},\n                minDstGasLookup: {},\n                trustedRemoteLookup: {}\n            }\n\n            checkWireAllConfigObj[localNetwork].useCustomAdapterParams[\"useCustomAdapterParams\"] = \"\";\n            checkWireAllConfigObj[localNetwork].withdrawalFeeBps[\"withdrawalFeeBps\"] = \"\";\n            checkWireAllConfigObj[localNetwork].minDstGasLookup[localNetwork] = \"\";\n            checkWireAllConfigObj[localNetwork].trustedRemoteLookup[localNetwork] = \"\";\n\n            let localContractNameOrAddress: any;\n            if(taskArgs?.proxyChain && taskArgs?.proxyContract && localNetwork == taskArgs?.proxyChain) {\n                localContractNameOrAddress = taskArgs?.proxyContract\n            } else if(taskArgs?.contract !== undefined) {\n                localContractNameOrAddress = taskArgs.contract\n            } else if(contractAddresses !== undefined) {\n                localContractNameOrAddress = contractAddresses[localIndex]\n            }\n\n            if (localContractNameOrAddress === undefined && contractAddresses === undefined) {\n                logError(`Invalid wire up config for localContractNameOrAddress.`);\n                return;\n            }\n\n            if(taskArgs.u) checkWireAllConfigObj[localNetwork].useCustomAdapterParams[\"useCustomAdapterParams\"] = await getUseCustomAdapterParams(hre, localNetwork, localContractNameOrAddress);\n            if(taskArgs.wfb) checkWireAllConfigObj[localNetwork].withdrawalFeeBps[\"withdrawalFeeBps\"] = await getWithdrawalFeeBps(hre, localNetwork, localContractNameOrAddress);\n\n            await Promise.all(\n                remoteNetworks.map(async (remoteNetwork: string, remoteIndex: number) => {\n\n                    let remoteContractNameOrAddress;\n                    if(taskArgs?.proxyChain && taskArgs?.proxyContract && remoteNetwork == taskArgs?.proxyChain) {\n                        remoteContractNameOrAddress = taskArgs?.proxyContract\n                    } else if(taskArgs?.contract !== undefined) {\n                        remoteContractNameOrAddress = taskArgs.contract\n                    } else if(contractAddresses !== undefined) {\n                        remoteContractNameOrAddress = contractAddresses[remoteIndex]\n                    }\n\n                    if (remoteContractNameOrAddress === undefined && contractAddresses === undefined) {\n                        logError(`Invalid wire up config for remoteContractNameOrAddress.`);\n                        return;\n                    }\n\n                    if(taskArgs.t) checkWireAllConfigObj[localNetwork].trustedRemoteLookup[remoteNetwork] = await getTrustedRemote(hre, localNetwork, localContractNameOrAddress, remoteNetwork, remoteContractNameOrAddress);\n                    if(taskArgs.m) checkWireAllConfigObj[localNetwork].minDstGasLookup[remoteNetwork] = await getMinDstGas(hre, localNetwork, localContractNameOrAddress, remoteNetwork);\n                })\n            );\n        })\n    );\n\n    if(taskArgs.u) {\n        console.log(\"Use Custom Adapter Params Table\");\n        let useCustomAdapterParamsTable = Object.keys(checkWireAllConfigObj).map((network) => ({ [network]: checkWireAllConfigObj[network].useCustomAdapterParams}))\n        console.table(useCustomAdapterParamsTable.reduce(((r, c) => Object.assign(r, c)), {}));\n    }\n\n    if(taskArgs.wfb) {\n        console.log(\"Withdrawal Fee Bps Lookup Table\");\n        let minDstGasLookupTable = Object.keys(checkWireAllConfigObj).map((network) => ({ [network]: checkWireAllConfigObj[network].withdrawalFeeBps}))\n        console.table(minDstGasLookupTable.reduce(((r, c) => Object.assign(r, c)), {}));\n    }\n\n    if(taskArgs.t) {\n        console.log(\"Trusted Remote Lookup Table\");\n        let trustedRemoteLookupTable = Object.keys(checkWireAllConfigObj).map((network) => ({ [network]: checkWireAllConfigObj[network].trustedRemoteLookup}))\n        console.table(trustedRemoteLookupTable.reduce(((r, c) => Object.assign(r, c)), {}));\n    }\n\n    if(taskArgs.m) {\n        console.log(\"Min Dst Gas Lookup Table\");\n        let minDstGasLookupTable = Object.keys(checkWireAllConfigObj).map((network) => ({ [network]: checkWireAllConfigObj[network].minDstGasLookup}))\n        console.table(minDstGasLookupTable.reduce(((r, c) => Object.assign(r, c)), {}));\n    }\n}\n\nasync function getUseCustomAdapterParams(hre: any, localNetwork: string, localContractNameOrAddress: string): Promise<any> {\n\tlet localContract;\n\tif (hre.ethers.utils.isAddress(localContractNameOrAddress)) {\n\t\tlocalContract = await getContractAt(hre, localNetwork, LZ_APP_ABI, localContractNameOrAddress);\n\t} else {\n\t\tlocalContract = await getContract(hre, localNetwork, localContractNameOrAddress);\n\t}\n\treturn await localContract.useCustomAdapterParams();\n}\n\nasync function getWithdrawalFeeBps(hre: any, localNetwork: string, localContractNameOrAddress: string): Promise<any> {\n\tlet localContract;\n\tif (hre.ethers.utils.isAddress(localContractNameOrAddress)) {\n\t\tlocalContract = await getContractAt(hre, localNetwork, LZ_APP_ABI, localContractNameOrAddress);\n\t} else {\n\t\tlocalContract = await getContract(hre, localNetwork, localContractNameOrAddress);\n\t}\n\tlet withdrawalFeeBps;\n\ttry {\n\t    withdrawalFeeBps = await localContract.withdrawalFeeBps();\n\t} catch(e) {\n\t    withdrawalFeeBps = \"N/A\"\n\t}\n\treturn withdrawalFeeBps;\n}\n\n\nasync function getMinDstGas(hre: any, localNetwork: string, localContractNameOrAddress: string, remoteNetwork: string,): Promise<string> {\n\tlet localContract;\n\tif (hre.ethers.utils.isAddress(localContractNameOrAddress)) {\n\t\tlocalContract = await getContractAt(hre, localNetwork, LZ_APP_ABI, localContractNameOrAddress);\n\t} else {\n\t\tlocalContract = await getContract(hre, localNetwork, localContractNameOrAddress);\n\t}\n    let packetTypes: any;\n    if(localNetwork === remoteNetwork) return \"\";\n    const remoteChainId = getLayerZeroChainId(remoteNetwork);\n    let minGasPk_0 = await localContract.minDstGasLookup(remoteChainId, 0)\n    let minGasPk_1 = await localContract.minDstGasLookup(remoteChainId, 1)\n    packetTypes = {\n        \"PT_0\": minGasPk_0.toString(),\n        \"PT_1\": minGasPk_1.toString()\n    }\n    return packetTypes;\n}\n\nasync function getTrustedRemote(hre: any, localNetwork: string, localContractNameOrAddress: string, remoteNetwork: string, remoteContractNameOrAddress: string): Promise<any> {\n\tlet localContract;\n\tif (hre.ethers.utils.isAddress(localContractNameOrAddress)) {\n\t\tlocalContract = await getContractAt(hre, localNetwork, LZ_APP_ABI, localContractNameOrAddress);\n\t} else {\n\t\tlocalContract = await getContract(hre, localNetwork, localContractNameOrAddress);\n\t}\n\n    let remoteContract;\n    if (hre.ethers.utils.isAddress(remoteContractNameOrAddress)) {\n        remoteContract = await getContractAt(hre, remoteNetwork, LZ_APP_ABI, remoteContractNameOrAddress);\n    } else {\n        remoteContract = await getContract(hre, remoteNetwork, remoteContractNameOrAddress);\n    }\n\n\tconst remoteContractAddress = await remoteContract.address;\n\tconst desiredTrustedRemote = hre.ethers.utils.solidityPack([\"bytes\"], [remoteContractAddress + localContract.address.substring(2)]);\n\tconst remoteChainId = getLayerZeroChainId(remoteNetwork)\n\tconst currentTrustedRemote = await localContract.trustedRemoteLookup(remoteChainId);\n\treturn currentTrustedRemote != desiredTrustedRemote ? (localNetwork === remoteNetwork ? \"\" : \"🟥\") : \"🟩\";\n}"]}